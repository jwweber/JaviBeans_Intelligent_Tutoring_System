package edu.asu.CSE360.recitation6.group6;
/*
 *The universe class is creating  JFrame that displays 3 JPanels.
 *JPanels are generated by other classes.
 *It includes a JSlider that navigates between the panels.
 *Added complete overhaul to user interface
 *Now interacts with program clock and Companion Message panel singleton classes
 *Assignment Number: Recitation Project #4
 *Completion time:10 additional hours
 *@author Jamison Weber
 *@version #3.0
 */ 
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
public class Universe extends JFrame implements Observer{
	private static int userProfileNumber = 1;
	private JPanel backPanel;
	private JPanel frontPanel;
	private JPanel bottomRight;
	private JPanel bottom;
	private Tutor tutorContent;
	private JPanel rightPanel;
	private Assessor assessorContent;
	private JPanel companion;
	private BasicCompanion companionContent;
	private JSlider slider;
	private JLabel interactionAreaLabel;
	private JButton getStarted;
	private Observable eval;
	private Observable subject;
	private CompanionTroll troll;
	private MotivationalCompanion mc;
	private JPanel interactionArea;
	private CardLayout cl;
	private TopicFrame tf;
	private JPanel companionText;
	private CompanionMessagePanel cmp;
	private JToggleButton toggle;
	private boolean guided;
	private ControlCenter cc;
	private JButton logoff;
	private JLabel instructions;
	private ProgressReport pr;
	private FlashTopicFrame flashTopic;
	//Constructor creates objects for tutor, companion and assessor and initializes GUI.
	public Universe(int userID, Observable subject) throws IOException {
		super ("JaviBeans Intelligent Tutoring System");
		this.userProfileNumber = userID;
		this.subject = subject;
		cc = ControlCenter.getInstance();
		guided = false;
		subject.addObserver(this);
		Thread clock = new Thread((Runnable) subject);
		System.out.println("User ID: " + userProfileNumber);
		tutorContent = new Tutor();
		eval = new Evaluator(userProfileNumber);
		companionContent = new BasicCompanion(eval);
		eval.addObserver(companionContent);
		troll = new CompanionTroll();
		mc = new MotivationalCompanion();
		mc.add(companionContent);
		troll.add(companionContent);
		clock.start();
		gui();
		companionContent.changeState(cc.getDecisionState());
	}
	//ID getter
	static int getUserID(){
		return userProfileNumber;
	}
	//ID setter
	static void setUserID(int userID){
		userProfileNumber = userID;
	}
	//This method adjusts the layout of the main panel and adds tutor, assessor and companion
	//objects to each of its subframes. It also creats the slider object.
	public void gui() {
		//Main Frame Code
		this.setSize(1600,800);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );
		this.setResizable(false);
		backPanel = new JPanel(new BorderLayout());
		backPanel.setBackground(Color.lightGray);
		frontPanel = new JPanel();
		frontPanel.setPreferredSize(new Dimension(750,750));
		frontPanel.setBackground(Color.DARK_GRAY);
		backPanel.add(frontPanel,BorderLayout.CENTER);
		this.add(backPanel);
		//Companion Code
		companion = new JPanel();
		companion.setPreferredSize(new Dimension(350,350));
		companion.add(companionContent);
		companion.setVisible(true);
		frontPanel.add(companionContent);
		tf = new TopicFrame();
		interactionArea = new JPanel();
		interactionArea.setPreferredSize(new Dimension(800,800));
		interactionArea.setVisible(true);
		interactionAreaLabel = new JLabel("Interaction Area");
		interactionAreaLabel.setFont(new Font("Times New Roman", Font.BOLD, 30));
		interactionArea.add(interactionAreaLabel);
		JPanel spacer1 = new JPanel();
		spacer1.setPreferredSize(new Dimension(800,150));
		interactionArea.add(spacer1);
		toggle = new JToggleButton("Toggle to enable guided JaviBeans Companion.");
		toggle.addActionListener(new Listener(this));
		interactionArea.add(toggle);
		JPanel spacer3 = new JPanel();
		spacer3.setPreferredSize(new Dimension(800,75));
		interactionArea.add(spacer3);
		instructions = new JLabel();
		instructions.setText("<html>Welcome to JaviBeans Tutoring System!<br>Use the slider below to navigate to slides,"
				+ " quizzes, programming assignments,<br>flashcards, progress and more.<br>If you are having trouble, toggle the guided "
				+ "companion mode above.<br>If the guided companion is toggled, when you click the next button on your quiz,<br>"
				+ "it will inform you if you are correct or give you a hint."
				+ "<br>You can retake quizzes or redo programming assignments to improve your standing.<br>"
				+ "If you complete all 6 quizzes and all 6 programming assignments and the<br>"
				+ "Companion face is happy, you will recieve a certificate of achievement."
				+ "<br>Logging off will save your progress and return you to the login menu.</html>");
		instructions.setFont(new Font("Times New Roman", Font.BOLD, 18));
		interactionArea.add(instructions);
		JPanel spacer2 = new JPanel();
		spacer2.setPreferredSize(new Dimension(800,50));
		interactionArea.add(spacer2);
		logoff = new JButton("Log Off");
		logoff.addActionListener(new Listener(this));
		interactionArea.add(logoff);
		rightPanel = new JPanel();
		rightPanel.setPreferredSize(new Dimension(800,800));
		cl = new CardLayout();
		rightPanel.setLayout(cl);
		rightPanel.setVisible(true);
		rightPanel.add(interactionArea, "ia");
		rightPanel.add(((Evaluator) eval).getPanelOne(), "assignments");
		rightPanel.add(((Evaluator) eval).getPanelTwo(), "quizzes");
		rightPanel.add(tf, "slides");
		flashTopic = new FlashTopicFrame();
		rightPanel.add(flashTopic, "flashcards");
		pr = new ProgressReport();
		rightPanel.add(pr,"progress report");
		frontPanel.add(rightPanel);
		companionText = new JPanel();
		companionText.setPreferredSize(new Dimension(350,350));
		cmp = CompanionMessagePanel.getInstance();
		companionText.add(cmp);
		frontPanel.add(companionText);
		//Bottom Panel Code
		bottom = new JPanel();
		bottom.setPreferredSize(new Dimension(1600,50));
		bottom.setBackground(Color.DARK_GRAY);
		this.add(bottom,BorderLayout.SOUTH);
		//Slider Code	
	    slider = new JSlider(JSlider.HORIZONTAL, 0, 5, 0);
	    slider.setPreferredSize(new Dimension(1550,25));
	    bottom.add(slider);
	    getStarted = new JButton("Get Started");
	    getStarted.addActionListener(new Listener(this));
	    //This call adds a subclass to the slider object that changes the state of
	    //assessor, companion, and tutor depending on the position of the slider.
	    slider.addChangeListener(new ChangeListener(){
	        public void stateChanged(ChangeEvent e) {
	          if(slider.getValue()==1) {
	        	  cl.show(rightPanel, "slides");
	          }
	          else if(slider.getValue()==2) {
	        	  cl.show(rightPanel,"assignments");
	          }
	          else if(slider.getValue()==3) {
	        	  cl.show(rightPanel,"quizzes");
	          }
	          else if(slider.getValue()==4) {
	        	  cl.show(rightPanel, "flashcards");
	          }
	          else if(slider.getValue()==5) {
	        	  try {
					pr.update();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	        	  cl.show(rightPanel, "progress report");
	          }
	          else if(slider.getValue()==0) {
	        	  	cl.show(rightPanel,"ia");
	          }
	        }
	      });
	    //Make Frame Visible (always last line of code)
		this.setVisible(true);
	}
	//Listener for interaction area objects.
	private class Listener implements ActionListener{
		private Universe u;
		public Listener(Universe u){
			this.u = u;
		}
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == toggle){
				if(toggle.isSelected()){
					cc.setGuided(true);
				}
				else{
					cc.setGuided(false);
				}
			}
			else if(e.getSource() == logoff){
				u.setVisible(false);
				u.dispose();
			}
		}
	}
	//Required method for observer object
	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		if(ProgramClock.getElapsedSeconds() % 600 == 0){
			if(ProgramClock.getElapsedSeconds() < 1800){
				mc.displayMessage();
			}
			else{
				troll.displayMessage();
			}
		}	
	}
}
	